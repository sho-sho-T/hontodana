/**
 * WishlistCard „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆ„ÉÜ„Çπ„Éà
 */

import React from 'react'
import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import { WishlistCard } from '@/components/wishlist/WishlistCard'

// Next.js router „ÅÆ„É¢„ÉÉ„ÇØ
const mockPush = jest.fn()
jest.mock('next/navigation', () => ({
  useRouter: () => ({
    push: mockPush
  })
}))

// Next.js Image „ÅÆ„É¢„ÉÉ„ÇØ
jest.mock('next/image', () => ({
  __esModule: true,
  default: ({ src, alt, ...props }: any) => (
    <img src={src} alt={alt} {...props} />
  )
}))

describe('WishlistCard', () => {
  const defaultWishlistItem = {
    id: 'item-1',
    userId: 'user-1',
    bookId: 'book-1',
    priority: 'medium' as const,
    reason: '„É¨„Éì„É•„Éº„ÅåËâØ„ÅÑ',
    targetDate: new Date('2024-12-31'),
    priceAlert: null,
    createdAt: new Date('2024-01-01'),
    updatedAt: new Date('2024-01-01'),
    book: {
      id: 'book-1',
      title: '„ÉÜ„Çπ„ÉàÊõ∏Á±ç',
      authors: ['ËëóËÄÖÂêç'],
      publisher: '„ÉÜ„Çπ„ÉàÂá∫ÁâàÁ§æ',
      thumbnailUrl: '/test-image.jpg',
      pageCount: 300,
      description: '„ÉÜ„Çπ„ÉàÊõ∏Á±ç„ÅÆË™¨Êòé',
      categories: ['„Éï„Ç£„ÇØ„Ç∑„Éß„É≥']
    }
  }

  const defaultProps = {
    item: defaultWishlistItem,
    onPriorityChange: jest.fn(),
    onRemove: jest.fn(),
    onMoveToLibrary: jest.fn()
  }

  beforeEach(() => {
    jest.clearAllMocks()
  })

  describe('Âü∫Êú¨Ë°®Á§∫', () => {
    test('„Ç¶„Ç£„ÉÉ„Ç∑„É•„É™„Çπ„Éà„Ç¢„Ç§„ÉÜ„É†„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', () => {
      render(<WishlistCard {...defaultProps} />)
      
      expect(screen.getByText('„ÉÜ„Çπ„ÉàÊõ∏Á±ç')).toBeInTheDocument()
      expect(screen.getByText('ËëóËÄÖÂêç')).toBeInTheDocument()
      expect(screen.getByText('„ÉÜ„Çπ„ÉàÂá∫ÁâàÁ§æ')).toBeInTheDocument()
      expect(screen.getByText('„É¨„Éì„É•„Éº„ÅåËâØ„ÅÑ')).toBeInTheDocument()
    })

    test('Êõ∏ÂΩ±„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', () => {
      render(<WishlistCard {...defaultProps} />)
      
      const image = screen.getByRole('img', { name: /„ÉÜ„Çπ„ÉàÊõ∏Á±ç/i })
      expect(image).toHaveAttribute('src', '/test-image.jpg')
      expect(image).toHaveAttribute('alt', '„ÉÜ„Çπ„ÉàÊõ∏Á±ç „ÅÆÊõ∏ÂΩ±')
    })

    test('Êõ∏ÂΩ±„Åå„Å™„ÅÑÂ†¥Âêà„ÅØfallbackÁîªÂÉè„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      const itemWithoutThumbnail = {
        ...defaultWishlistItem,
        book: {
          ...defaultWishlistItem.book,
          thumbnailUrl: null
        }
      }
      
      render(<WishlistCard {...defaultProps} item={itemWithoutThumbnail} />)
      
      const image = screen.getByRole('img', { name: /„ÉÜ„Çπ„ÉàÊõ∏Á±ç/i })
      expect(image).toHaveAttribute('src', '/images/book-placeholder.png')
    })

    test('ÁõÆÊ®ôÊó•„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      render(<WishlistCard {...defaultProps} />)
      
      expect(screen.getByText('ÁõÆÊ®ô: 2024-12-31')).toBeInTheDocument()
    })

    test('ÁõÆÊ®ôÊó•„Åå„Å™„ÅÑÂ†¥Âêà„ÅØË°®Á§∫„Åï„Çå„Å™„ÅÑ', () => {
      const itemWithoutTargetDate = {
        ...defaultWishlistItem,
        targetDate: null
      }
      
      render(<WishlistCard {...defaultProps} item={itemWithoutTargetDate} />)
      
      expect(screen.queryByText(/ÁõÆÊ®ô:/)).not.toBeInTheDocument()
    })
  })

  describe('ÂÑ™ÂÖàÂ∫¶Ë°®Á§∫', () => {
    test('urgentÂÑ™ÂÖàÂ∫¶„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', () => {
      const urgentItem = {
        ...defaultWishlistItem,
        priority: 'urgent' as const
      }
      
      render(<WishlistCard {...defaultProps} item={urgentItem} />)
      
      expect(screen.getByText('üî¥')).toBeInTheDocument()
      expect(screen.getByText('Á∑äÊÄ•')).toBeInTheDocument()
    })

    test('highÂÑ™ÂÖàÂ∫¶„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', () => {
      const highItem = {
        ...defaultWishlistItem,
        priority: 'high' as const
      }
      
      render(<WishlistCard {...defaultProps} item={highItem} />)
      
      expect(screen.getByText('üü°')).toBeInTheDocument()
      expect(screen.getByText('È´ò')).toBeInTheDocument()
    })

    test('mediumÂÑ™ÂÖàÂ∫¶„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', () => {
      render(<WishlistCard {...defaultProps} />)
      
      expect(screen.getByText('üü¢')).toBeInTheDocument()
      expect(screen.getByText('‰∏≠')).toBeInTheDocument()
    })

    test('lowÂÑ™ÂÖàÂ∫¶„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', () => {
      const lowItem = {
        ...defaultWishlistItem,
        priority: 'low' as const
      }
      
      render(<WishlistCard {...defaultProps} item={lowItem} />)
      
      expect(screen.getByText('‚ö™')).toBeInTheDocument()
      expect(screen.getByText('‰Ωé')).toBeInTheDocument()
    })
  })

  describe('„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥', () => {
    test('„Ç´„Éº„Éâ„ÇØ„É™„ÉÉ„ÇØÊôÇ„Å´Êõ∏Á±çË©≥Á¥∞ÁîªÈù¢„Å´ÈÅ∑Áßª„Åô„Çã', () => {
      render(<WishlistCard {...defaultProps} />)
      
      const card = screen.getByRole('article')
      fireEvent.click(card)
      
      expect(mockPush).toHaveBeenCalledWith('/books/book-1')
    })

    test('ÂÑ™ÂÖàÂ∫¶Â§âÊõ¥„Éú„Çø„É≥„ÅåÂãï‰Ωú„Åô„Çã', async () => {
      render(<WishlistCard {...defaultProps} />)
      
      const priorityButton = screen.getByRole('button', { name: /ÂÑ™ÂÖàÂ∫¶Â§âÊõ¥/i })
      fireEvent.click(priorityButton)
      
      await waitFor(() => {
        expect(defaultProps.onPriorityChange).toHaveBeenCalledWith('item-1', 'high')
      })
    })

    test('ÂâäÈô§„Éú„Çø„É≥„ÅåÂãï‰Ωú„Åô„Çã', async () => {
      render(<WishlistCard {...defaultProps} />)
      
      const removeButton = screen.getByRole('button', { name: /ÂâäÈô§/i })
      fireEvent.click(removeButton)
      
      expect(defaultProps.onRemove).toHaveBeenCalledWith('item-1')
    })

    test('Êú¨Ê£öÁßªÂãï„Éú„Çø„É≥„ÅåÂãï‰Ωú„Åô„Çã', async () => {
      render(<WishlistCard {...defaultProps} />)
      
      const moveButton = screen.getByRole('button', { name: /Êú¨Ê£ö„Å´ÁßªÂãï/i })
      fireEvent.click(moveButton)
      
      expect(defaultProps.onMoveToLibrary).toHaveBeenCalledWith('item-1')
    })
  })

  describe('„É¨„Çπ„Éù„É≥„Ç∑„ÉñÂØæÂøú', () => {
    test('„É¢„Éê„Ç§„É´Ë°®Á§∫„ÅßÈÅ©Âàá„Å´„É¨„Ç§„Ç¢„Ç¶„Éà„Åï„Çå„Çã', () => {
      // „É¢„Éê„Ç§„É´„Çµ„Ç§„Ç∫„Çí„Ç∑„Éü„É•„É¨„Éº„Éà
      Object.defineProperty(window, 'innerWidth', {
        writable: true,
        configurable: true,
        value: 375,
      })

      render(<WishlistCard {...defaultProps} />)
      
      const card = screen.getByRole('article')
      expect(card).toHaveClass('flex-col') // „É¢„Éê„Ç§„É´ÊôÇ„ÅØÁ∏¶‰∏¶„Å≥
    })
  })

  describe('„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£', () => {
    test('ÈÅ©Âàá„Å™ARIAÂ±ûÊÄß„ÅåË®≠ÂÆö„Åï„Çå„Çã', () => {
      render(<WishlistCard {...defaultProps} />)
      
      const card = screen.getByRole('article')
      expect(card).toHaveAttribute('aria-label', '„ÉÜ„Çπ„ÉàÊõ∏Á±ç „ÅÆ„Ç¶„Ç£„ÉÉ„Ç∑„É•„É™„Çπ„Éà„Ç¢„Ç§„ÉÜ„É†')
    })

    test('„Ç≠„Éº„Éú„Éº„ÉâÊìç‰Ωú„ÅåÂèØËÉΩ', () => {
      render(<WishlistCard {...defaultProps} />)
      
      const priorityButton = screen.getByRole('button', { name: /ÂÑ™ÂÖàÂ∫¶Â§âÊõ¥/i })
      priorityButton.focus()
      
      expect(priorityButton).toHaveFocus()
      
      fireEvent.keyDown(priorityButton, { key: 'Enter' })
      
      expect(defaultProps.onPriorityChange).toHaveBeenCalledWith('item-1', 'high')
    })
  })

  describe('„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞', () => {
    test('‰∏çÊ≠£„Å™„Éá„Éº„Çø„Åß„ÇÇ„ÇØ„É©„ÉÉ„Ç∑„É•„Åó„Å™„ÅÑ', () => {
      const invalidItem = {
        ...defaultWishlistItem,
        book: null
      }
      
      expect(() => {
        render(<WishlistCard {...defaultProps} item={invalidItem} />)
      }).not.toThrow()
    })

    test('„Ç≥„Éº„É´„Éê„ÉÉ„ÇØÈñ¢Êï∞„Åå„Å™„ÅÑÂ†¥Âêà„Åß„ÇÇ„ÇØ„É©„ÉÉ„Ç∑„É•„Åó„Å™„ÅÑ', () => {
      const propsWithoutCallbacks = {
        item: defaultWishlistItem
      }
      
      expect(() => {
        render(<WishlistCard {...propsWithoutCallbacks} />)
      }).not.toThrow()
    })
  })
})