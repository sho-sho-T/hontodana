// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  userBooks   UserBook[]
  wishlists   Wishlist[]
  readingLogs ReadingLog[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Book {
  id              String    @id @default(cuid())
  title           String
  author          String
  isbn            String?   @unique
  isbn13          String?   @unique
  googleBooksId   String?   @unique
  description     String?   @db.Text
  publisher       String?
  publishedDate   String?
  pageCount       Int?
  language        String?
  categories      String[]  @default([])
  averageRating   Float?
  ratingsCount    Int?
  thumbnail       String?
  smallThumbnail  String?
  previewLink     String?
  infoLink        String?
  canonicalVolumeLink String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  userBooks   UserBook[]
  wishlists   Wishlist[]
  readingLogs ReadingLog[]

  @@map("books")
}

model UserBook {
  id          String      @id @default(cuid())
  userId      String
  bookId      String
  bookFormat  BookFormat  @default(PHYSICAL)
  readingStatus ReadingStatus @default(WANT_TO_READ)
  currentPage Int?        @default(0)
  totalPages  Int?
  rating      Int?        @db.SmallInt
  notes       String?     @db.Text
  favorite    Boolean     @default(false)
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  book        Book        @relation(fields: [bookId], references: [id], onDelete: Cascade)
  readingLogs ReadingLog[]

  @@unique([userId, bookId])
  @@map("user_books")
}

model ReadingLog {
  id         String   @id @default(cuid())
  userId     String
  bookId     String
  userBookId String
  pagesRead  Int
  timeSpent  Int?     // minutes
  notes      String?  @db.Text
  mood       String?
  location   String?
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  book     Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  userBook UserBook @relation(fields: [userBookId], references: [id], onDelete: Cascade)

  @@map("reading_logs")
}

model Wishlist {
  id          String    @id @default(cuid())
  userId      String
  bookId      String
  priority    Int       @default(1) @db.SmallInt
  notes       String?   @db.Text
  expectedPurchaseDate DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
  @@map("wishlists")
}

enum BookFormat {
  PHYSICAL
  EBOOK
  AUDIOBOOK
}

enum ReadingStatus {
  WANT_TO_READ
  CURRENTLY_READING
  COMPLETED
  PAUSED
  DROPPED
}
